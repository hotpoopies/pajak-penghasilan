package com.ukm.simulasikredit

import android.annotation.SuppressLint
import android.app.DatePickerDialog
import android.content.Context
import android.content.Intent
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.view.MenuItem
import android.view.View
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.annotation.RequiresApi
import androidx.appcompat.app.ActionBar
import com.google.android.gms.ads.*
import com.google.android.gms.ads.interstitial.InterstitialAd
import com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.skydoves.powerspinner.PowerSpinnerView
import com.ukm.simulasikredit.databinding.ActivityGeneralLoanSimulationEnBinding
import com.ukm.simulasikredit.databinding.GeneralLoanSimulationActivityBinding
import com.ukm.simulasikredit.models.ParameterModel
import com.ukm.simulasikredit.tools.ActivityTools
import com.ukm.simulasikredit.tools.GeneralTools
import com.ukm.simulasikredit.tools.MoneyTextWatcher
import com.ukm.simulasikredit.tools.SharedPreferencesTools
import java.text.DecimalFormatSymbols
import java.text.NumberFormat
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*

class GeneralLoanSimulationEnActivity : AppCompatActivity() {


    private var validasi: Boolean = true
    private lateinit var binding: ActivityGeneralLoanSimulationEnBinding

    private lateinit var spinnerTipeSimulasi: PowerSpinnerView

    private lateinit var spinnerTenor: PowerSpinnerView

    private var flagTipeSimulasi: Boolean = false
    private var flagJenisKredit: Boolean = false

    private var flagTenorFixed: Boolean = false

    private var flagDP: Boolean = false

    private lateinit var listTipeSimulasi: ArrayList<ParameterModel>
    private lateinit var listJenisKredit: ArrayList<ParameterModel>
    private lateinit var listSukuBunga: ArrayList<ParameterModel>

    private lateinit var listTenorFixed: ArrayList<ParameterModel>



    private lateinit var editTextAdministrasi: EditText
    private lateinit var editTextNamaNasabah: EditText
    private lateinit var editTextTanggalMulaiKredit: EditText
    private lateinit var editTextPPN: EditText
    private lateinit var editTextBiayaNotaris: EditText
    private lateinit var editTextPremiAsuransiJiwa: EditText
    private lateinit var editTextPlafondKredit: EditText
    private lateinit var editTextBiayaLainLain: EditText
    private lateinit var editTextSukuBunga: EditText

    private lateinit var editTextPremiAsuransiKerugian: EditText


    private lateinit var textViewNamaNasabah: TextView
    private lateinit var textViewAdministrasi: TextView
    private lateinit var textViewKredit: TextView
    private lateinit var textViewLainLain: TextView


    private lateinit var textViewPPN: TextView
    private lateinit var textViewTanggalMulaiKredit: TextView
    private lateinit var textViewPremiAsuransiJiwa: TextView
    private lateinit var textViewPremiAsuransiJiwaKerugian: TextView
    private lateinit var textViewBiayaNotaris: TextView

    private lateinit var imageTipeSimulasi: ImageView
    private lateinit var imageNamaNasabah: ImageView
    private lateinit var imageTanggalMulaiKredit: ImageView
    private lateinit var imagePlafonKredit: ImageView

    private lateinit var imageTenor: ImageView
    private lateinit var imagePremiAsuransiJiwa: ImageView

    private lateinit var imagePremiAsuransiKerugian: ImageView
    private lateinit var imageBiayaNotaris: ImageView
    private lateinit var imageAdministrasi: ImageView

    private lateinit var linierAsuransi: LinearLayout
    private lateinit var linierLainLain: LinearLayout
    private lateinit var linierKredit: LinearLayout


    private lateinit var linierMotor: LinearLayout


    lateinit var lang :String
    lateinit var country :String
    lateinit var currency :String
    lateinit var locale: Locale
    lateinit var symbol : DecimalFormatSymbols
    lateinit var version :String

    private val launchSomeActivity = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == AppCompatActivity.RESULT_OK) {
            val data = result.data
            val harga = data!!.getStringExtra("harga")
            editTextPlafondKredit.setText( harga)

            if (interstitialAd != null) {
                interstitialAd!!.show(this)
            }
        } else {
            Toast.makeText(applicationContext, "Cancelled...", Toast.LENGTH_SHORT).show()
        }
    }

    override fun onStop() {
        // call the superclass method first
        super.onStop()



    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun bindings() {
        textViewNamaNasabah = binding.textviewNamanasabah
        textViewAdministrasi = binding.textviewAdministrasi
        textViewKredit = binding.textviewKredit
        textViewLainLain = binding.textviewLainlain
        textViewTanggalMulaiKredit = binding.textviewTanggalmulaikredit

        textViewPPN = binding.textviewTax
        textViewPremiAsuransiJiwa = binding.textviewPremiasuransijiwa

        textViewPremiAsuransiJiwaKerugian = binding.textviewPremiasuransikerugian
        textViewBiayaNotaris = binding.textviewBiayanotaris

        editTextAdministrasi = binding.edittextAdministrasi
        editTextNamaNasabah = binding.editNasabah


        editTextTanggalMulaiKredit = binding.edittextTanggalmulaikredit
        editTextPPN = binding.edittextTax

        editTextBiayaNotaris = binding.edittextBiayanotaris

        editTextPremiAsuransiJiwa = binding.edittextPremiasuransijiwa

        editTextPremiAsuransiKerugian = binding.edittextPremiasuransikerugian

        editTextPlafondKredit = binding.edittextPlafondkredit
        editTextBiayaLainLain = binding.edittextBiayalainlain

        editTextSukuBunga = binding.edittextSukubunga




        spinnerTipeSimulasi = binding.spinnerSimulationtype

        spinnerTenor = binding.spinnerTenor
        imageTipeSimulasi = binding.imageTipesimulasi
        imageNamaNasabah = binding.imageNamanasabah
        imageTanggalMulaiKredit = binding.imageTanggalmulaikredit


        imageAdministrasi = binding.imageAdministrasi
        imageTenor = binding.imageTenor

        imagePremiAsuransiJiwa = binding.imagePremiasuransijiwa

        imagePremiAsuransiKerugian = binding.imagePremiasuransikerugian
        imageBiayaNotaris = binding.imageBiayanotaris
        imagePlafonKredit = binding.imagePlafondkredit

        linierAsuransi = binding.linearAsuransi
        linierLainLain = binding.linearLainlain
        linierKredit = binding.linearKredit

        linierMotor = binding.linierMotor


        floatingActionButtonSimulasi = binding.floatingActionButtonSimulasi!!
        floatingActionButtonClose = binding.floatingActionButtonClose!!


        floatingActionButtonSimulasi.setOnClickListener {

            validasi = true

            if (spinnerTipeSimulasi.selectedIndex < 0) {
                spinnerTipeSimulasi.setError("Please Select Interest Type")
                spinnerTipeSimulasi.setHint("Please Select Interest Type")

                spinnerTipeSimulasi.requestFocus()

                validasi = false
                GeneralTools.toast(this,"Please Select Interest Type",0)

                return@setOnClickListener

            }



            if (editTextNamaNasabah.text.toString() == "") {

                editTextNamaNasabah.setError("Please Input Customer Name")
                editTextNamaNasabah.setHint("Please Input Customer Name")

                validasi = false

                editTextNamaNasabah.requestFocus()

                GeneralTools.toast(this,"Please Input Customer Name",0)

                return@setOnClickListener
            }

            if (editTextPlafondKredit.text.toString() == "") {

                editTextPlafondKredit.setError("Please Input Loan Amount")
                editTextPlafondKredit.setHint("Please Input Loan Amount")

                editTextPlafondKredit.requestFocus()

                validasi = false

                GeneralTools.toast(this,"Please Input Loan Amount",0)

                return@setOnClickListener
            }


            if (spinnerTenor.selectedIndex < 0) {

                spinnerTenor.setError("Please Select Term (Month)")
                spinnerTenor.setHint("Please Select Term (Month)")

                spinnerTenor.requestFocus()

                validasi = false

                GeneralTools.toast(this,"Please Select Term (Month)",0)

                return@setOnClickListener
            }
            if (editTextSukuBunga.text.toString() == "") {

                editTextSukuBunga.setError("Please Input Interest Rate")
                editTextSukuBunga.setHint("Please Input Interest Rate")

                validasi = false

                editTextSukuBunga.requestFocus()

                GeneralTools.toast(this,"Please Input Interest Rate",0)

                return@setOnClickListener
            }

            if (editTextSukuBunga.text.toString() != "" ) {

                if (editTextSukuBunga.text.toString().toDouble() > 100) {

                    editTextSukuBunga.setError("Max Interest Rate 100 (%)")
                    editTextSukuBunga.setHint("Max Interest Rate 100 (%)")

                    validasi = false

                    editTextSukuBunga.requestFocus()
                    GeneralTools.toast(this, "Max Interest Rate 100 (%)", 0)
                    return@setOnClickListener
                }
            }

            if (editTextPremiAsuransiJiwa.text.toString() == "") {

                editTextPremiAsuransiJiwa.setError("Please Input Life Insurance Premium")
                editTextPremiAsuransiJiwa.setHint("Please Input Life Insurance Premium")

                editTextPremiAsuransiJiwa.requestFocus()



                validasi = false

                GeneralTools.toast(this,"Please Input Life Insurance Premium",0)

                return@setOnClickListener
            }

            if (editTextPremiAsuransiKerugian.text.toString() == "") {

                editTextPremiAsuransiKerugian.setError("Please Input Insurance Premium for Loss")
                editTextPremiAsuransiKerugian.setHint("Please Input Insurance Premium for Loss")

                editTextPremiAsuransiKerugian.requestFocus()

                validasi = false

                GeneralTools.toast(this,"Please Input Insurance Premium for Loss",0)

                return@setOnClickListener
            }


            if (editTextPPN.text.toString() == "") {

                editTextPPN.setError("Please Input Tax")
                editTextPPN.setHint("Please Input Tax")

                editTextPPN.requestFocus()

                validasi = false

                GeneralTools.toast(this,"Please Input Tax",0)

                return@setOnClickListener
            }


            if (editTextAdministrasi.text.toString() == "") {

                editTextAdministrasi.setError("Please Input Administrative Fee")
                editTextAdministrasi.setHint("Please Input Administrative Fee")

                editTextAdministrasi.requestFocus()

                validasi = false

                GeneralTools.toast(this,"Please Input Administrative Fee",0)

                return@setOnClickListener
            }


            if (editTextBiayaNotaris.text.toString() == "") {

                editTextBiayaNotaris.setError("Please Input Notary Fee")
                editTextBiayaNotaris.setHint("Please Input Notary Fee")

                editTextBiayaNotaris.requestFocus()

                validasi = false

                GeneralTools.toast(this,"Please Input Notary Fee",0)

                return@setOnClickListener
            }



            if (editTextBiayaLainLain.text.toString() == "") {

                editTextBiayaLainLain.setError("Please Input Others Fee")
                editTextBiayaLainLain.setHint("Please Input Others Fee")

                editTextBiayaLainLain.requestFocus()

                validasi = false

                GeneralTools.toast(this,"Please Input Others Fee",0)

                return@setOnClickListener
            }













            if (validasi) {

                showInterstitial()


            }

        }

        floatingActionButtonClose.setOnClickListener {

            reset()
        }


        floatingActionButtonSave = binding.floatingActionButtonSave


        floatingActionButtonSave.setOnClickListener {

            SharedPreferencesTools.saveData(this,"spinnerTipeSimulasiGeneralLoan",
                spinnerTipeSimulasi.selectedIndex.toString()
            )

            SharedPreferencesTools.saveData(this,"spinnerTenorGeneralLoan",
                spinnerTenor.selectedIndex.toString()
            )


            SharedPreferencesTools.saveData(this,"editTextPlafondKreditGeneralLoan", editTextPlafondKredit.text.toString())
            SharedPreferencesTools.saveData(this,"editTextSukuBungaGeneralLoan", editTextSukuBunga.text.toString())
            SharedPreferencesTools.saveData(this,"editTextPremiAsuransiJiwaGeneralLoan", editTextPremiAsuransiJiwa.text.toString())
            SharedPreferencesTools.saveData(this,"editTextPremiAsuransiKerugianGeneralLoan", editTextPremiAsuransiKerugian.text.toString())
            SharedPreferencesTools.saveData(this,"editTextPPNGeneralLoan", editTextPPN.text.toString())
            SharedPreferencesTools.saveData(this,"editTextBiayaLainLainGeneralLoan", editTextBiayaLainLain.text.toString())
            SharedPreferencesTools.saveData(this,"editTextBiayaNotarisGeneralLoan", editTextBiayaNotaris.text.toString())
            SharedPreferencesTools.saveData(this,"editTextAdministrasiGeneralLoan", editTextAdministrasi.text.toString())
            SharedPreferencesTools.saveData(this,"editTextNamaNasabahGeneralLoan", editTextNamaNasabah.text.toString())



            Toast.makeText(
                this,
                "Data Saved!",
                Toast.LENGTH_SHORT
            ).show()

        }





    }


    @RequiresApi(Build.VERSION_CODES.O)
    private fun load(){



        if(SharedPreferencesTools.getData(this,"spinnerTipeSimulasiGeneralLoan")!="" &&
            SharedPreferencesTools.getData(this,"spinnerTipeSimulasiGeneralLoan")!="-1") {

            spinnerTipeSimulasi.selectItemByIndex(
                SharedPreferencesTools.getData(this, "spinnerTipeSimulasiGeneralLoan")!!.toInt()
            )
        }  else{

            reset()
        }

        if(SharedPreferencesTools.getData(this,"spinnerTenorGeneralLoan")!="") {



            if (intent.getIntExtra("tenor",0)!=0){
                spinnerTenor.selectItemByIndex(intent.getIntExtra("tenor",0)?.toInt() ?: 0)
            }else{
                spinnerTenor.selectItemByIndex(
                    SharedPreferencesTools.getData(this, "spinnerTenorGeneralLoan")!!.toInt()
                )

            }


        }


        if(SharedPreferencesTools.getData(this,"editTextPlafondKreditGeneralLoan")!="") {




            if (intent.getStringExtra("plafondKredit")!=""){
                editTextPlafondKredit.setText(intent.getStringExtra("plafondKredit"))
            }else{
                editTextPlafondKredit.setText(
                    SharedPreferencesTools.getData(
                        this,
                        "editTextPlafondKreditGeneralLoan"
                    )
                )
            }

        }


        if(SharedPreferencesTools.getData(this,"editTextSukuBungaGeneralLoan")!="") {




            if (intent.getDoubleExtra("sukuBunga",0.0)!=0.0){
                editTextSukuBunga.setText(intent.getDoubleExtra("sukuBunga",0.0).toString())
            }else{
                editTextSukuBunga.setText(SharedPreferencesTools.getData(this, "editTextSukuBungaGeneralLoan"))

            }
        }


        if(SharedPreferencesTools.getData(this,"editTextAdministrasiGeneralLoan")!="") {

            editTextAdministrasi.setText(
                SharedPreferencesTools.getData(
                    this,
                    "editTextAdministrasiGeneralLoan"
                )
            )
        }

        if(SharedPreferencesTools.getData(this,"editTextPPNGeneralLoan")!="") {

            editTextPPN.setText(SharedPreferencesTools.getData(this, "editTextPPNGeneralLoan"))
        }


        if(SharedPreferencesTools.getData(this,"editTextBiayaLainLainGeneralLoan")!="") {


            editTextBiayaLainLain.setText(
                SharedPreferencesTools.getData(
                    this,
                    "editTextBiayaLainLainGeneralLoan"
                )
            )
        }


        if(SharedPreferencesTools.getData(this,"editTextPremiAsuransiJiwaGeneralLoan")!="") {

            editTextPremiAsuransiJiwa.setText(
                SharedPreferencesTools.getData(
                    this,
                    "editTextPremiAsuransiJiwaGeneralLoan"
                )
            )
        }


        if(SharedPreferencesTools.getData(this,"editTextPremiAsuransiKerugianGeneralLoan")!="") {

            editTextPremiAsuransiKerugian.setText(
                SharedPreferencesTools.getData(
                    this,
                    "editTextPremiAsuransiKerugianGeneralLoan"
                )
            )
        }


        if(SharedPreferencesTools.getData(this,"editTextAdministrasiGeneralLoan")!="") {

            editTextAdministrasi.setText(
                SharedPreferencesTools.getData(
                    this,
                    "editTextAdministrasiGeneralLoan"
                )
            )
        }

        if(SharedPreferencesTools.getData(this,"editTextBiayaNotarisGeneralLoan")!="") {

            editTextBiayaNotaris.setText(
                SharedPreferencesTools.getData(
                    this,
                    "editTextBiayaNotarisGeneralLoan"
                )
            )
        }


        if(SharedPreferencesTools.getData(this,"editTextNamaNasabahGeneralLoan")!="") {

            editTextNamaNasabah.setText(
                SharedPreferencesTools.getData(
                    this,
                    "editTextNamaNasabahGeneralLoan"
                )
            )
        }



        flag = true

    }



    lateinit var floatingActionButtonSave: FloatingActionButton


    lateinit var floatingActionButtonSimulasi: FloatingActionButton
    lateinit var floatingActionButtonClose: FloatingActionButton



    override fun onResume() {
        Log.e("DEBUG", "OnPause of HomeFragment")
        super.onResume()

        //motionProgressLoaderView?.stopLoader()
        if (flag) {

            flag = false
            //motionProgressLoaderView?.stopLoader()
            //motionProgressLoaderView?.cancel()
        }
    }

    private var flag: Boolean =false





    @RequiresApi(Build.VERSION_CODES.O)
    @SuppressLint("ResourceAsColor", "ClickableViewAccessibility")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityGeneralLoanSimulationEnBinding.inflate(layoutInflater)


        val view = binding.root


        setContentView(view)

        title = "General Loan Calculator"



        currency = SharedPreferencesTools.getData(this,"APPCurrency").toString()
        lang = currency!!.split("-")[0]
        country = currency.split("-")[1]

        locale = Locale(lang, country)

        symbol = DecimalFormatSymbols(locale)

        version = SharedPreferencesTools.getData(this,"APPVersion").toString()

        bindings()
        editTextNamaNasabah.setText(SharedPreferencesTools.getData(this,"name"))


        var currency = SharedPreferencesTools.getData(this,"APPCurrency")

        var lang = currency!!.split("-")[0]
        var country = currency.split("-")[1]

        editTextBiayaNotaris.addTextChangedListener(MoneyTextWatcher(editTextBiayaNotaris,lang,country));

        editTextBiayaNotaris.addTextChangedListener(MoneyTextWatcher(editTextBiayaNotaris,lang,country));
        editTextAdministrasi.addTextChangedListener(MoneyTextWatcher(editTextAdministrasi,lang,country));

        editTextPremiAsuransiJiwa.addTextChangedListener(MoneyTextWatcher(editTextPremiAsuransiJiwa,lang,country));
        editTextPlafondKredit.addTextChangedListener(MoneyTextWatcher(editTextPlafondKredit,lang,country));
        editTextBiayaLainLain.addTextChangedListener(MoneyTextWatcher(editTextBiayaLainLain,lang,country));



        editTextPremiAsuransiKerugian.addTextChangedListener(
            MoneyTextWatcher(
                editTextPremiAsuransiKerugian,lang,country
            )
        );

        spinnerTipeSimulasi.setOnSpinnerOutsideTouchListener { view, motionEvent ->

            spinnerTipeSimulasi.dismiss()
        }


        spinnerTipeSimulasi.setOnClickListener {


            if (!flagTipeSimulasi) {

                spinnerTipeSimulasi.setTextColor(resources.getColor(R.color.blue_1))
                spinnerTipeSimulasi.show()
            } else {
                spinnerTipeSimulasi.dismiss()
            }

            flagTipeSimulasi = !flagTipeSimulasi
        }


        spinnerTipeSimulasi.setOnFocusChangeListener { view,b->

            if(b){

                spinnerTipeSimulasi.dismiss()
            }
        }



        spinnerTenor.setOnSpinnerOutsideTouchListener { view, motionEvent ->

            spinnerTenor.dismiss()
        }
        spinnerTenor.setOnClickListener {


            if (!flagTenorFixed) {

                spinnerTenor.setTextColor(resources.getColor(R.color.blue_1))
                spinnerTenor.show()
            } else {
                spinnerTenor.dismiss()
            }

            flagTenorFixed = !flagTenorFixed
        }



        spinnerTipeSimulasi.setOnSpinnerItemSelectedListener<String> { _, _, _, newText ->
            spinnerTipeSimulasi.setTextColor(resources.getColor(R.color.black))

            spinnerTipeSimulasi.setError(null)
            spinnerTipeSimulasi.setHint("Tipe Simulasi")

        }




        spinnerTenor.setOnSpinnerItemSelectedListener<String> { _, _, _, _ ->
            spinnerTenor.setTextColor(resources.getColor(R.color.black))
            spinnerTenor.setError(null)
            spinnerTenor.setHint("Term ")

        }



        textViewTanggalMulaiKredit.setOnClickListener {

            openDatePicker()
        }

        editTextTanggalMulaiKredit.setOnFocusChangeListener { _, hasFocus ->
            if (hasFocus) {
                openDatePicker()
            }
        }

        editTextTanggalMulaiKredit.setOnClickListener {

            openDatePicker()
        }

        imageTanggalMulaiKredit.setOnClickListener {

            openDatePicker()
        }





        loadAds()

        val actionBar: ActionBar? = supportActionBar

        // showing the back button in action bar

        // showing the back button in action bar
        actionBar?.setDisplayHomeAsUpEnabled(true)



        val current = LocalDateTime.now()

        val formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy")
        val formatted = current.format(formatter)



        editTextTanggalMulaiKredit.setText(
            formatted
        )


        editTextNamaNasabah.setText(SharedPreferencesTools.getData(this,"name"))
        getTipeSimulasi()

        if(SharedPreferencesTools.getData(this,"APPVersion")!="75") {


            title = "General Loan Calculator"



        }
    }


    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            android.R.id.home -> {
                finish()
                return true
            }
        }
        return super.onOptionsItemSelected(item)
    }
    private lateinit var adView: AdView
    private lateinit var adRequest: AdRequest

    private fun loadAds(){

        adView = binding.adView!!
        MobileAds.initialize(this)

        val testDeviceIds = listOf(
            "A27D54F21D395038C90E85A8C00C1DBD"
        )
        val configuration =
            RequestConfiguration.Builder().setTestDeviceIds(testDeviceIds).build()
        MobileAds.setRequestConfiguration(configuration)

        // on below line we are initializing
        // our ad view with its id


        // on below line we are
        // initializing our ad request.
        adRequest = AdRequest.Builder().build()

        // on below line we are loading our
        // ad view with the ad request
        adView.loadAd(adRequest)


        loadInterstitialAd()



    }

    private fun hitung(){
        ActivityTools.startGeneralLoanSimulationEnResultActivity(
            this,
            spinnerTipeSimulasi.selectedIndex,
            editTextNamaNasabah.text.toString(),
            editTextTanggalMulaiKredit.text.toString(),
            editTextPlafondKredit.text.toString().replace("${symbol.currencySymbol} ", "").replace(".", "").replace(",", ""),
            editTextSukuBunga.text.toString().toDouble(),

            editTextPremiAsuransiJiwa.text.toString().replace("${symbol.currencySymbol} ", "").replace(".", "").replace(",", ""),

            editTextPremiAsuransiKerugian.text.toString().replace("${symbol.currencySymbol} ", "")
                .replace(".", ""),

            editTextAdministrasi.text.toString().replace("${symbol.currencySymbol} ", "").replace(".", "").replace(",", ""),
            editTextBiayaNotaris.text.toString().replace("${symbol.currencySymbol} ", "").replace(".", "").replace(",", ""),
            editTextBiayaLainLain.text.toString().replace("${symbol.currencySymbol} ", "").replace(".", "").replace(",", ""),
            editTextPPN.text.toString().toInt(),
            listTenorFixed[spinnerTenor.selectedIndex].ParameterValue.toString().toInt()

        )
    }
    fun rupiah(number: Double): String {
        val localeID = Locale(lang, country)
        val numberFormat = NumberFormat.getCurrencyInstance(localeID)
        return numberFormat.format(number).toString()
    }

    private fun openDatePicker() {

        val mcurrentTime = Calendar.getInstance()
        val year = mcurrentTime.get(Calendar.YEAR)
        val month = mcurrentTime.get(Calendar.MONTH)
        val day = mcurrentTime.get(Calendar.DAY_OF_MONTH)

        val datePicker = DatePickerDialog(
            this,
            R.style.MyDatePickerStyle,
            object : DatePickerDialog.OnDateSetListener {
                override fun onDateSet(view: DatePicker?, year: Int, month: Int, dayOfMonth: Int) {

                    editTextTanggalMulaiKredit.setText(
                        String.format(
                            "%d / %d / %d",
                            dayOfMonth,
                            month + 1,
                            year
                        )
                    )

                    textViewTanggalMulaiKredit.setError(null)
                }
            },
            year,
            month,
            day
        );

        datePicker.show()
        datePicker.getButton(DatePickerDialog.BUTTON_NEGATIVE)
            .setTextColor(resources.getColor(R.color.blue_1))
        datePicker.getButton(DatePickerDialog.BUTTON_POSITIVE)
            .setTextColor(resources.getColor(R.color.blue_1))

    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun getTipeSimulasi() {
        listTipeSimulasi= ArrayList<ParameterModel>()
        listTipeSimulasi.add(ParameterModel("Flat", "0", "tipe_simulasi_general"))
        listTipeSimulasi.add(ParameterModel("Annuity", "1", "tipe_simulasi_general"))
        listTipeSimulasi.add(ParameterModel("Reducing", "1", "tipe_simulasi_general"))

        spinnerTipeSimulasi.setItems(  listTipeSimulasi.map{listTipeSimulasi-> listTipeSimulasi.ParameterDisplay})



        getTenor()



    }


    @RequiresApi(Build.VERSION_CODES.O)
    private fun getTenor() {

        listTenorFixed = ArrayList<ParameterModel>()


        for (i in 0..300 step 12) {
            listTenorFixed.add(ParameterModel("Term $i Months", i.toString(), ""))

        }

        spinnerTenor.setItems(listTenorFixed.map { listTenorFixed -> listTenorFixed.ParameterDisplay })



        setHint()
        load()



    }




    private fun setHint(){



        editTextAdministrasi.setHint("${symbol.currencySymbol} 0")
        editTextPremiAsuransiJiwa.setHint("${symbol.currencySymbol} 0")
        editTextPremiAsuransiKerugian.setHint("${symbol.currencySymbol} 0")

        editTextPlafondKredit.setHint("${symbol.currencySymbol} 0")
        editTextBiayaLainLain.setHint("${symbol.currencySymbol} 0")
        editTextBiayaNotaris.setHint("${symbol.currencySymbol} 0")
        editTextSukuBunga.setHint("10")
        editTextPPN.setHint("0")

        spinnerTenor.setHint("Term (Months)")

        spinnerTipeSimulasi.setHint("Interest Type")


    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun reset() {

        spinnerTipeSimulasi.setHintTextColor(resources.getColor(R.color.black))
        spinnerTenor.setHintTextColor(resources.getColor(R.color.black))


        editTextNamaNasabah.setText(SharedPreferencesTools.getData(this,"name"))
        spinnerTipeSimulasi.clearSelectedItem()
        editTextAdministrasi.setText("")
        editTextPremiAsuransiJiwa.setText("")
        editTextPremiAsuransiKerugian.setText("")

        editTextPlafondKredit.setText("")
        editTextBiayaLainLain.setText("")
        editTextBiayaNotaris.setText("")
        editTextSukuBunga.setText("")


        spinnerTenor.clearSelectedItem()

        val current = LocalDateTime.now()

        val formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy")
        val formatted = current.format(formatter)



        editTextTanggalMulaiKredit.setText(
            formatted
        )




        spinnerTipeSimulasi.selectItemByIndex(-1)
        spinnerTenor.selectItemByIndex(-1)

        SharedPreferencesTools.saveData(this,"spinnerTipeSimulasiGeneralLoan",
            "-1"
        )

        SharedPreferencesTools.saveData(this,"spinnerTenorGeneralLoan",
            "-1"
        )

        SharedPreferencesTools.saveData(this,"editTextPlafondKreditGeneralLoan", "")
        SharedPreferencesTools.saveData(this,"editTextSukuBungaGeneralLoan", "")
        SharedPreferencesTools.saveData(this,"editTextPremiAsuransiJiwaGeneralLoan", "")
        SharedPreferencesTools.saveData(this,"editTextPremiAsuransiKerugianGeneralLoan", "")
        SharedPreferencesTools.saveData(this,"editTextPPNGeneralLoan", "")
        SharedPreferencesTools.saveData(this,"editTextBiayaLainLainGeneralLoan", "")
        SharedPreferencesTools.saveData(this,"editTextBiayaNotarisGeneralLoan", "")
        SharedPreferencesTools.saveData(this,"editTextAdministrasiGeneralLoan", "")

        if (intent.getIntExtra("tenor",0)!=0){
            spinnerTenor.selectItemByIndex(intent.getIntExtra("tenor",0))
        }


        if (intent.getDoubleExtra("sukuBunga",0.0)!=0.0){
            editTextSukuBunga.setText(intent.getDoubleExtra("sukuBunga",0.0).toString())
        }else{
            editTextSukuBunga.setText("")
        }

        if (intent.getStringExtra("plafondKredit")!=""){
            editTextPlafondKredit.setText(intent.getStringExtra("plafondKredit"))
        }else{
            editTextPlafondKredit.setText("")
        }
        setHint()

    }

    private var interstitialAd: InterstitialAd? = null

    private fun loadInterstitialAd() {

        val testDeviceIds = listOf(
            "A27D54F21D395038C90E85A8C00C1DBD"
        )
        val configuration =
            RequestConfiguration.Builder().setTestDeviceIds(testDeviceIds).build()
        MobileAds.setRequestConfiguration(configuration)
        val adRequest = AdRequest.Builder().build()
        InterstitialAd.load(this, getString(R.string.interstitial_ad_unit_id), adRequest,
            object : InterstitialAdLoadCallback() {
                override fun onAdLoaded(ad: InterstitialAd) {
                    // The interstitialAd reference will be null until
                    // an ad is loaded.
                    interstitialAd = ad

                    ad.setFullScreenContentCallback(
                        object : FullScreenContentCallback() {
                            override fun onAdDismissedFullScreenContent() {
                                // Called when fullscreen content is dismissed.
                                // Make sure to set your reference to null so you don't
                                // show it a second time.
                                interstitialAd = null
                                Log.d(title.toString(), "The ad was dismissed.")


                                loadInterstitialAd()

                                hitung()

                            }

                            override fun onAdFailedToShowFullScreenContent(adError: AdError) {
                                // Called when fullscreen content failed to show.
                                // Make sure to set your reference to null so you don't
                                // show it a second time.
                                interstitialAd = null
                                Log.d(title.toString(), "The ad failed to show.")

                                hitung()
                            }

                            override fun onAdShowedFullScreenContent() {
                                // Called when fullscreen content is shown.
                                Log.d(title.toString(), "The ad was shown.")


                            }


                        })
                }

                override fun onAdFailedToLoad(loadAdError: LoadAdError) {
                    // Handle the error
                    Log.i(title.toString(), loadAdError.message)
                    interstitialAd = null

                    val error: String = String.format(
                        Locale.ENGLISH,
                        "domain: %s, code: %d, message: %s",
                        loadAdError.domain,
                        loadAdError.code,
                        loadAdError.message
                    )
                }
            })


    }

    private fun showInterstitial() {
        // Show the ad if it"s ready. Otherwise toast and reload the ad.

        if (interstitialAd != null) {

            interstitialAd!!.show(this)
        } else {
            hitung()
        }
    }
}